{"version":3,"sources":["Const.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ServerURL","App","props","state","books","newBookData","title","rating","editBookData","id","newBookModal","editBookModal","openInvalidModal","getAllBooks","console","log","fullURL","axios","get","then","response","setState","data","catch","err","status","code","toogleNewBookModal","toogleEditBookModal","clickEditBook","book","onInputNewTitleChange","e","target","value","onInputNewRatingChange","onInputEditTitleChange","onInputEditRatingChange","addNewBook","post","editBook","deleteBook","toggleInvalidModal","bind","this","booksList","map","key","className","Button","color","size","onClick","Container","fluid","Row","Col","sm","md","offset","Modal","name","isOpen","toggle","ModalHeader","ModalBody","FormGroup","Label","for","Input","placeholder","onChange","ModalFooter","Table","striped","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c490bfbb.chunk.js","sourcesContent":["const ServerURL = 'https://www.appvip2020.net'\n// const ServerURL = 'https://47.107.105.61'\n// const ServerURL = 'http://localhost:9090'\n\nexport {ServerURL}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Table, \n        Button, \n        Modal, \n        ModalHeader, \n        ModalBody, \n        ModalFooter, \n        FormGroup, \n        Label, \n        Input,\n        Container,\n        Row,\n        Col } from 'reactstrap'\nimport {ServerURL} from './Const'\nimport './AppStyle.css'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.editBook = this.editBook.bind(this)\n    this.deleteBook = this.deleteBook.bind(this)\n    this.getAllBooks = this.getAllBooks.bind(this)\n    // this.onInputTitleChange = this.onInputTitleChange.bind(this)\n    // this.onInputRatingChange = this.onInputRatingChange.bind(this)\n    this.toogleNewBookModal = this.toogleNewBookModal.bind(this)\n    this.toogleEditBookModal = this.toogleEditBookModal.bind(this)\n    this.clickEditBook = this.clickEditBook.bind(this)\n    this.toggleInvalidModal = this.toggleInvalidModal.bind(this)\n  }\n\n  state = {\n    books: [],\n    newBookData: {\n      title: '',\n      rating: ''\n    },\n    editBookData: {\n      id: '',\n      title: '',\n      rating: ''\n    },\n    newBookModal: false,\n    editBookModal: false,\n    openInvalidModal: false\n  }\n\n\n  componentWillMount() {\n    this.getAllBooks()\n  }\n\n\n  getAllBooks = () => {\n    console.log('Start to contact to getallbook')\n\n    // axios.get('http://47.107.105.61:8080/springboot-package/getallbook').then((response) => {\n    // const fullURL = `https://${ServerURL}/book/GetAllBook`\n    const fullURL = `${ServerURL}/book/GetAllBook`\n\n    axios.get(fullURL).then((response) => {      \n      console.log('Start to contact to getallbook')\n      this.setState({\n        books:response.data\n      })\n    }).catch((err) =>{\n      console.log('Failed to contact to getallbook again.')\n      console.log('err status: ', err.response.status)\n      console.log('err code: ', err.response.code)\n      console.log('Failed to contact to getallbook again. The err is ', err)\n    })    \n  }\n\n\n  toogleNewBookModal = () => {\n    this.setState({\n      newBookModal: !this.state.newBookModal\n    })\n  }\n\n\n  toogleEditBookModal = () => {\n    this.setState({\n      editBookModal: !this.state.editBookModal\n    })\n  }\n\n\n  clickEditBook = (book) => {\n    this.setState({\n      editBookData: {\n        id: book.id,\n        title: book.title,\n        rating: book.rating\n      },\n      editBookModal: !this.state.editBookModal\n    })\n  }\n\n\n  onInputNewTitleChange = ((e) => {\n    let {newBookData} = this.state\n    let rating = newBookData.rating\n    let title = e.target.value\n\n    this.setState({\n      newBookData: {\n        title,\n        rating\n      }\n    })\n  })\n\n\n  onInputNewRatingChange = ((e) => {\n    let {newBookData} = this.state\n    let title = newBookData.title\n    let rating = e.target.value\n\n    this.setState({\n      newBookData: {\n        title,\n        rating\n      }\n    })\n  })  \n\n\n  onInputEditTitleChange = ((e) => {\n    let {editBookData} = this.state\n    let id = editBookData.id    \n    let rating = editBookData.rating\n    let title = e.target.value\n\n    this.setState({\n      editBookData: {\n        id,\n        title,\n        rating\n      }\n    })\n  })\n\n\n  onInputEditRatingChange = ((e) => {\n    let {editBookData} = this.state\n    let id = editBookData.id\n    let title = editBookData.title\n    let rating = e.target.value\n\n    this.setState({\n      editBookData: {\n        id,\n        title,\n        rating\n      }\n    })\n  })  \n\n  \n  addNewBook = () => {\n    // axios.post('http://47.107.105.61:9090/book/AddNewBook', this.state.newBookData).then((response) => {\n    // const fullURL = `https://${ServerURL}/book/AddNewBook`\n    const fullURL = `${ServerURL}/book/AddNewBook`\n\n    axios.post(fullURL, this.state.newBookData).then((response) => {\n      console.log(response.data)\n      this.setState({\n        books: response.data,\n        newBookData: {\n          title: '',\n          rating: ''\n        },\n        newBookModal: false\n      })\n    }).catch((err) =>{\n      console.log('Failed to contact to getallbook. The err is ', err)\n      this.setState({\n        openInvalidModal: true\n      })      \n    })\n  }\n\n\n  editBook = () => {\n    // axios.post('http://47.107.105.61:9090/book/EditBook', this.state.editBookData).then((response) => {\n    // const fullURL = `https://${ServerURL}/book/EditBook`\n    const fullURL = `${ServerURL}/book/EditBook`\n\n    axios.post(fullURL, this.state.editBookData).then((response) => {\n      console.log(response.data)\n      this.setState({\n        books: response.data,\n        editBookData: {\n          id: '',\n          title: '',\n          rating: ''\n        },\n        editBookModal: false\n      })\n    }).catch((err) =>{\n      console.log('Failed to contact to getallbook. The err is ', err)\n      this.setState({\n        openInvalidModal: true\n      })      \n    })\n  }\n\n\n  deleteBook = (book) => {    \n    // axios.post('http://47.107.105.61:9090/book/DeleteBook', {id}).then((response) => {\n    // const fullURL = `https://${ServerURL}/book/DeleteBook`\n    const fullURL = `${ServerURL}/book/DeleteBook`\n\n    axios.post(fullURL, book).then((response) => {\n      console.log(response.data)\n      this.setState({\n        books: response.data,\n      })\n    }).catch((err) =>{\n      console.log('Failed to contact to getallbook. The err is ', err)\n    })\n  }\n\n\n  toggleInvalidModal = () => {\n    this.setState({\n      openInvalidModal: false\n    })\n  }\n\n\n  render() {    \n\n    let booksList = this.state.books.map((book) => {\n      return (\n        <tr key={book.id}>\n          <td>{book.id}</td>\n          <td>{book.title}</td>\n          <td className='styled-ratingTd'>{book.rating}</td>\n          <td className = 'styled-td'>\n            <Button \n              color='success' \n              size='sm'\n              className = 'mr-1'\n              onClick={() => this.clickEditBook(book)}>\n                Edit\n            </Button>\n            <Button \n              color='danger' \n              size='sm' \n              onClick={() => this.deleteBook(book)}>\n                Del\n            </Button>\n          </td>\n        </tr>\n      )\n    })\n\n\n    return (\n    \n      <div className=\"App container\">\n\n        <Container className=\"themed-container\" fluid=\"md\">\n          <Row className=\"my-2\">\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}><h1>Book App</h1></Col>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>version 2.0</Col>\n          </Row>          \n        </Container>\n\n        <Container className=\"themed-container\" fluid=\"md\">\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 8 }}>\n              <Button color=\"primary\" onClick={() => this.toogleNewBookModal()}>Add Book</Button>\n            </Col>\n          </Row>          \n        </Container>  \n        \n        <Modal name=\"New Book\" isOpen={this.state.newBookModal} toggle={() => this.toogleNewBookModal()}>\n          <ModalHeader toggle={() => this.toogleNewBookModal()}>New Book Detail</ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input \n                id=\"title\" \n                placeholder=\"Input Book Title\"\n                value={this.state.newBookData.title}\n                onChange={this.onInputNewTitleChange.bind(this)} />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"rating\">Rating</Label>\n              <Input \n                id=\"rating\" \n                placeholder=\"Input Book Rating\"\n                value={this.state.newBookData.rating}\n                onChange={this.onInputNewRatingChange.bind(this)} />\n            </FormGroup>              \n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.addNewBook()}>Add Book</Button>\n            <Button color=\"secondary\" onClick={() => this.toogleNewBookModal()}>Cancel</Button>\n          </ModalFooter>\n        </Modal>        \n\n        <Modal name=\"Edit Book\" isOpen={this.state.editBookModal} toggle={() => this.toogleEditBookModal()}>\n          <ModalHeader toggle={() => this.toogleEditBookModal()}>Edit Book Detail</ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input \n                id=\"title\" \n                placeholder=\"Input Book Title\"\n                value={this.state.editBookData.title}\n                onChange={this.onInputEditTitleChange.bind(this)} \n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"rating\">Rating</Label>\n              <Input \n                id=\"rating\" \n                placeholder=\"Input Book Rating\"\n                value={this.state.editBookData.rating}\n                onChange={this.onInputEditRatingChange.bind(this)} \n              />\n            </FormGroup>              \n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.editBook()}>Edit Book</Button>\n            <Button color=\"secondary\" onClick={() => this.toogleEditBookModal()}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n\n        <Modal isOpen={this.state.openInvalidModal}>\n          <ModalBody>\n            Input Invalid Data.\n          </ModalBody>\n          <ModalFooter>\n              <Button color=\"danger\" onClick={() => this.toggleInvalidModal()}>Close</Button>\n          </ModalFooter>\n        </Modal>        \n\n        <Table striped className=\"my-3\">\n          <thead>\n            <tr>\n              <th width={'5%'}>#</th>\n              <th width={'40%'}>Title</th>\n              <th width={'10%'}>Rating</th>\n              <th width={'45%'} className='styled-th'>Actions</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {booksList}\n          </tbody>\n        </Table>              \n      </div>\n\n    )\n  }\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}